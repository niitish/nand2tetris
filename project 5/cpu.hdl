// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],      // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // a reg
    Not(in=instruction[15], out=isASel);
    Mux16(a=aluOut, b=instruction, sel=isASel, out=aRegIn);

    Or(a=isASel, b=instruction[5], out=loadA);
    ARegister(in=aRegIn, load=loadA, out=A, out[0..14]=addressM);

    // alu y input
    And(a=instruction[15], b=instruction[12], out=useM);
    Mux16(a=A, b=inM, sel=useM, out=aluY);

    // alu x input // d reg
    // Load DRegister if it's a C-instruction and d2=1 (write to D)
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=D);

    // alu op
    ALU(
        x=D, y=aluY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng
    );

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // jgt
    Not(in=ng, out=notNg);
    Not(in=zr, out=notZr);
    And(a=instruction[15], b=instruction[0], out=jgtBit);
    And(a=notNg, b=notZr, out=isPositive);
    And(a=jgtBit, b=isPositive, out=jumpIfGT);

    // jeq
    And(a=instruction[15], b=instruction[1], out=jeqBit);
    And(a=jeqBit, b=zr, out=jumpIfEQ);

    // jlt
    And(a=instruction[15], b=instruction[2], out=jltBit);
    And(a=jltBit, b=ng, out=jumpIfLT);

    // should jump?
    Or(a=jumpIfGT, b=jumpIfEQ, out=jumpTemp);
    Or(a=jumpIfLT, b=jumpTemp, out=doJump);

    // pc
    PC(in=A, load=doJump, inc=true, reset=reset, out[0..14]=pc);
}